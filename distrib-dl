#!/bin/bash
# Download and verify Linux distribution installers/ISO images
# https://github.com/nodiscc/distrib-dl

set -o errexit
set -o nounset
set -o pipefail

##############################
# Configuration

### DEBIAN
# one of: amd64 armel armhf i386 ia64 kfreebsd-amd64 kfreebsd-i386 mips mipsel multi-arch powerpc s390 s390x source sparc
debian_architecture="amd64"
debian_version="11.2.0"
# one of: amd64, i386
debian_live_architecture="amd64"
# one of: cinnamon gnome kde lxde lxqt mate xfce
debian_live_desktop_environment="xfce"
### TAILS
tails_architecture="amd64"
tails_version="4.25"
### KALI
kali_architecture="amd64"
kali_version="2021.2"
kali_flavour="live" # live/installer
### CENTOS
centos_version_major="8"
centos_version_minor=".2.2004"
### PROXMOX
# https://www.proxmox.com/en/downloads/category/iso-images-pve
proxmox_version="7.1-2"
### PFSENSE
pfsense_version="2.5.0"
pfsense_installer_type="vga" #serial or vga
### FREEBSD
freebsd_version="13.0"
### ANDROID X86
androidx86_version="9.0-r2"
### DEBIAN-LIVE-CONFIG
# https://gitlab.com/nodiscc/debian-live-config
# https://github.com/nodiscc/debian-live-config/releases/
debian_live_config_version="3.0.0"
### FEDORA WORKSTATION
fedora_version_major="33"
fedora_version_minor="1.2"
### UBUNTU DESKTOP
ubuntu_architecture="amd64"
ubuntu_version="jammy"

############################

# abort on errors
set -o errexit

download_dir="$PWD"
usage="$0 [OPTIONS] DISTRIBUTION1 [DISTRIBUTION2 DISTRIBUTION3 ...] [all]
Available distributions: debian debian-live centos tails kali proxmox pfsense freebsd androidx86 debian-live-config fedora ubuntu
Options:
-c        only check that the url returns 200, don't download anything
-d DIR    specify base download directory (by default the current working directory is used)
-h        show help"

############################

function download_debian() {
    # Official netinstall image without firmwares (disabled)
    #debian_base_url="https://cdimage.debian.org/debian-cd/current/${architecture}/iso-cd/"
    #debian_iso_filename="debian-${debian_version}-${architecture}-netinst.iso"
    # Unofficial image including firmwares
    debian_base_url="https://cdimage.debian.org/cdimage/unofficial/non-free/cd-including-firmware/current/amd64/iso-cd/"
    debian_iso_filename="firmware-${debian_version}-${debian_architecture}-netinst.iso"
    debian_sums_url="${debian_base_url}/SHA512SUMS"
    debian_sums_sign_url="${debian_base_url}/SHA512SUMS.sign"
    if [[ ! -d "$download_dir/debian/" ]]; then mkdir -p "$download_dir/debian/"; fi
    echo "Downloading Debian checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian/" "$debian_sums_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian/" "$debian_sums_sign_url"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying Debian signature..."
        gpg --verify "$download_dir/debian/SHA512SUMS.sign" "$download_dir/debian/SHA512SUMS"
    fi
    echo "Downloading Debian ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian/" "$debian_base_url/$debian_iso_filename"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying Debian ISO image integrity..."
        (cd "$download_dir/debian/" && sha512sum --check --ignore-missing <(cat SHA512SUMS))
    fi
}

function download_debian_live() {
    # Official netinstall image without firmwares (disabled)
    #debian_live_base_url="https://cdimage.debian.org/debian-cd/current-live/${debian_live_architecture}/iso-hybrid/"
    #debian_iso_filename="debian-live-${debian_version}-${debian_live_architecture}-${debian_live_desktop_environment}.iso"
    # Unofficial image including firmwares
    debian_live_base_url="https://cdimage.debian.org/cdimage/unofficial/non-free/cd-including-firmware/current-live/${debian_live_architecture}/iso-hybrid/"
    debian_live_iso_filename="debian-live-${debian_version}-${debian_live_architecture}-${debian_live_desktop_environment}+nonfree.iso"
    debian_live_sums_url="${debian_live_base_url}/SHA512SUMS"
    debian_live_sums_sign_url="${debian_live_base_url}/SHA512SUMS.sign"
    if [[ ! -d "$download_dir/debian-live/" ]]; then mkdir -p "$download_dir/debian-live/"; fi
    echo "Downloading Debian Live checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian-live/" "$debian_live_sums_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian-live/" "$debian_live_sums_sign_url"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying Debian Live signature..."
        gpg --verify "$download_dir/debian-live/SHA512SUMS.sign" "$download_dir/debian-live/SHA512SUMS"
    fi
    echo "Downloading Debian Live ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian-live/" "$debian_live_base_url/$debian_live_iso_filename"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying Debian Live ISO image integrity..."
        (cd "$download_dir/debian-live/" && sha512sum --ignore-missing -c <(cat SHA512SUMS))
    fi
}

function download_centos() {
    # fingerprint: 6341 AB27 53D7 8A78 A7C2  7BB1 24C6 A8A7 F4A8 0EB5
    centos_base_url="https://ftp.osuosl.org/pub/centos/${centos_version_major}/isos/x86_64/"
    centos_iso_filename="CentOS-${centos_version_major}${centos_version_minor}-x86_64-boot.iso"
    centos_iso_url="${centos_base_url}/${centos_iso_filename}"
    #centos_iso_url="${centos_base_url}/CentOS-7-live-GNOME-x86_64.iso" #Alternative live image w/ GNOME desktop, disabled
    centos_key_url="https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official"
    centos_sums_sign_url="${centos_base_url}/CHECKSUM.asc"
    centos_sums_url="${centos_base_url}/CHECKSUM"
    if [[ ! -d "$download_dir/centos/" ]]; then mkdir -p "$download_dir/centos/"; fi
    echo "[distrib-dl] INFO: Downloading CentOS keys, checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/centos/" "$centos_key_url"
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/centos/" "$centos_sums_url"
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/centos/" "$centos_sums_sign_url"
    if [[ "$verify" == "true" ]]; then
        echo "[distrib-dl] INFO: Importing CentOS GPG key..."
        gpg --import "$download_dir/centos/RPM-GPG-KEY-CentOS-Official"
    fi
    echo "[distrib-dl] INFO: Downloading CentOS ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/centos/" "$centos_iso_url"
    if [[ "$verify" == "true" ]]; then
        echo "[distrib-dl] INFO: Verifying CentOS signature..."
        (cd "$download_dir/centos/" &&  gpg --verify < CHECKSUM.asc)
        echo "[distrib-dl] INFO: Verifying CentOS ISO image integrity..."
        (cd "$download_dir/centos" && sha256sum --ignore-missing -c CHECKSUM)
    fi
}

function download_tails() {
    if [[ ! -d "$download_dir/tails/" ]]; then mkdir -p "$download_dir/tails/"; fi
    tails_iso_url="https://dl.amnesia.boum.org/tails/stable/tails-${tails_architecture}-${tails_version}/tails-${tails_architecture}-${tails_version}.iso"
    tails_key_url="https://tails.boum.org/tails-signing.key"
    tails_sig_url="https://tails.boum.org/torrents/files/tails-${tails_architecture}-${tails_version}.iso.sig"
    echo "[distrib-dl] INFO: downloading Tails key and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/tails/" "$tails_key_url"
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/tails/" "$tails_sig_url"
    if [[ "$verify" == "true" ]]; then
        echo "[distrib-dl] INFO: Importing tails GPG key..."
        gpg --import "$download_dir/tails/tails-signing.key"
    fi
    echo "[distrib-dl] INFO: downloading Tails ISO image"
    #Force HTTPS but ignore certificate checks since Tails CDN can point to other servers than dl.amnesia.boum.org
    # shellcheck disable=SC2086
    wget $wget_opts --continue --no-check-certificate --timestamping --show-progress --directory-prefix="$download_dir/tails/" "$tails_iso_url"
    if [[ "$verify" == "true" ]]; then
        echo "[distrib-dl] INFO: verifying Tails signature..."
        tails_sig_filename="tails-${tails_architecture}-${tails_version}.iso.sig"
        tails_iso_filename="tails-${tails_architecture}-${tails_version}.iso"
        gpg --keyid-format 0xlong --verify "$download_dir/tails/$tails_sig_filename" "$download_dir/tails/$tails_iso_filename"
    fi
}

function download_kali() {
    kali_base_url="https://cdimage.kali.org/kali-$kali_version/"
    kali_iso_filename="kali-linux-$kali_version-$kali_flavour-$kali_architecture.iso"
    kali_key_url="https://archive.kali.org/archive-key.asc"
    if [[ ! -d "$download_dir/kali/" ]]; then mkdir -p "$download_dir/kali/"; fi
    echo "Downloading Kali checksums, key and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/kali/" "$kali_base_url/SHA256SUMS"
    # shellcheck disable=SC2086
    wget $wget_opts --continue --show-progress -O "$download_dir/kali/SHA256SUMS.gpg" "$kali_base_url/SHA256SUMS.gpg"
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/kali/" "$kali_key_url"
    echo "[distrib-dl] INFO: Importing Kali GPG key..."
    if [[ "$verify" == "true" ]]; then
        gpg --import "$download_dir/kali/archive-key.asc"
        echo "Verifying Kali signature..."
        gpg --verify "$download_dir/kali/SHA256SUMS.gpg" "$download_dir/kali/SHA256SUMS"
    fi
    echo "[distrib-dl] INFO: Downloading Kali ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/kali/" "$kali_base_url/$kali_iso_filename"
    if [[ "$verify" == "true" ]]; then
        echo "[distrib-dl] INFO: Verifying Kali ISO image integrity..."
        (cd "$download_dir/kali/" && sha256sum -c <(grep "$kali_iso_filename" SHA256SUMS))
    fi
}

function download_proxmox {
    # No list of available ISOs https://forum.proxmox.com/threads/wget-pmg-iso.42113/
    # https://www.proxmox.com/en/downloads/category/iso-images-pve
    # https://pve.proxmox.com/wiki/Roadmap
    # TODO checksums/gpg verify download
    if [[ ! -d "$download_dir/kali/" ]]; then mkdir -p "$download_dir/kali/"; fi
    proxmox_base_url="https://www.proxmox.com/images/download/pve/iso/"
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/proxmox/" "$proxmox_base_url/proxmox-ve_$proxmox_version.iso"
}

function download_pfsense {
    # TODO add other architectures (currently only amd64 supported)
    # New York mirror (disabled)
    #pfsense_base_url="https://nyifiles.pfsense.org/mirror/downloads"
    # Frankfurt mirror (disabled)
    #pfsense_base_url="https://frafiles.pfsense.org/mirror/downloads"
    # Main site
    pfsense_base_url="https://files.pfsense.org/mirror/downloads"
    if [[ "$pfsense_installer_type" == "serial" ]]; then pfsense_is_serial="serial-"
        elif [[ "$pfsense_installer_type" == "vga" ]]; then pfsense_is_serial=""
        else echo "[distrib-dl] ERROR: invalid installer type for pfsense: $pfsense_installer_type"; exit 1
    fi
    pfsense_iso_filename="pfSense-CE-memstick-${pfsense_is_serial}${pfsense_version}-RELEASE-amd64.img.gz"
    pfsense_hashes_base_url="https://files.pfsense.org/hashes/"
    if [[ ! -d "$download_dir/pfsense/" ]]; then mkdir -p "$download_dir/pfsense/"; fi
    echo "[distrib-dl] INFO: downloading pfsense checksums..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/pfsense/" "${pfsense_hashes_base_url}/${pfsense_iso_filename}.sha256"
    echo "[distrib-dl] INFO: downloading pfsense ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/pfsense/" "${pfsense_base_url}/${pfsense_iso_filename}"
    if [[ "$verify" == "true" ]]; then
        echo "[distrib-dl] INFO: verifying pfsense ISO image integrity..."
        (cd "$download_dir/pfsense" && sha256sum --check "pfSense-CE-memstick-${pfsense_is_serial}${pfsense_version}-RELEASE-amd64.img.gz.sha256")
    fi
}

function download_freebsd() {
    freebsd_base_url="https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/${freebsd_version}"
    freebsd_iso_filename="FreeBSD-${freebsd_version}-RELEASE-amd64-memstick.img"
    freebsd_sums_filename="CHECKSUM.SHA512-FreeBSD-${freebsd_version}-RELEASE-amd64"
    freebsd_gpgkeyring_url="https://docs.freebsd.org/pgpkeys/pgpkeys.txt"
    if [[ ! -d "$download_dir/freebsd/" ]]; then mkdir -p "$download_dir/freebsd/"; fi
    echo "[distrib-dl] INFO: Downloading freebsd keyring, checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/freebsd/" "$freebsd_gpgkeyring_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/freebsd/" "$freebsd_base_url/$freebsd_sums_filename"
    echo "[distrib-dl] INFO: Downloading freebsd ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/freebsd/" "$freebsd_base_url/$freebsd_iso_filename"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying freebsd ISO image integrity..."
        (cd "$download_dir/freebsd/" && sha512sum --ignore-missing -c <(cat ${freebsd_sums_filename}))
    fi
}

function download_androidx86() {
    androidx86_base_url='https://osdn.net/frs/redir.php?m=dotsrc&f=android-x86%2F71931%2F'
    androidx86_iso_filename="android-x86_64-${androidx86_version}.iso"
    if [[ ! -d "$download_dir/androidx86/" ]]; then mkdir -p "$download_dir/androidx86/"; fi
    echo "[distrib-dl] INFO: Downloading Android x86 ISO image..."
    echo "[distrib-dl] WARNING: Android x86 ISO image will not be checked for integrity/authenticity..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue -N -nv --show-progress -O "$download_dir/androidx86/$androidx86_iso_filename" "${androidx86_base_url}${androidx86_iso_filename}"
}

function download_debian_live_config() {
    # https://gitlab.com/nodiscc/debian-live-config
    debian_live_config_base_url="https://github.com/nodiscc/debian-live-config/releases/download/$debian_live_config_version/"
    debian_live_config_iso_filename="dlc-${debian_live_config_version}-debian-bullseye-amd64.hybrid.iso"
    debian_live_config_key_url="${debian_live_config_base_url}/dlc-release.key"
    debian_live_config_sums_url="${debian_live_config_base_url}/SHA512SUMS"
    debian_live_config_sums_sign_url="${debian_live_config_base_url}/SHA512SUMS.sign"
    if [[ ! -d "$download_dir/debian-live-config/" ]]; then mkdir -p "$download_dir/debian-live-config/"; fi
    echo "Downloading debian-live-config checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian-live-config/" "$debian_live_config_sums_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian-live-config/" "$debian_live_config_sums_sign_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/debian-live-config/" "$debian_live_config_key_url"
    if [[ "$verify" == "true" ]]; then
        echo "Importing debian-live-config GPG key..."
        gpg --import "$download_dir/debian-live-config/dlc-release.key"
        echo "Verifying debian-live-config signature..."
        gpg --verify "$download_dir/debian-live-config/SHA512SUMS.sign" "$download_dir/debian-live-config/SHA512SUMS"
    fi
    echo "Downloading debian-live-config ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/debian-live-config/" "$debian_live_config_base_url/$debian_live_config_iso_filename"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying debian-live-config ISO image integrity..."
        (cd "$download_dir/debian-live-config/" && sha512sum -c <(cat SHA512SUMS))
    fi
}


function download_fedora() {
    fedora_version_full="${fedora_version_major}-${fedora_version_minor}"
    fedora_iso_filename="Fedora-Workstation-Live-x86_64-${fedora_version_full}.iso"
    fedora_iso_url="https://download.fedoraproject.org/pub/fedora/linux/releases/${fedora_version_major}/Workstation/x86_64/iso/${fedora_iso_filename}"
    fedora_sums_filename="Fedora-Workstation-${fedora_version_major}-${fedora_version_minor}-x86_64-CHECKSUM"
    fedora_sums_url="https://getfedora.org/static/checksums/${fedora_sums_filename}"
    fedora_key_filename="fedora.gpg"
    fedora_key_url="https://getfedora.org/static/${fedora_key_filename}"
    if [[ ! -d "$download_dir/fedora/" ]]; then mkdir -p "$download_dir/fedora/"; fi
    echo "Downloading fedora checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/fedora/" "$fedora_sums_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/fedora/" "$fedora_key_url"
    if [[ "$verify" == "true" ]]; then
        echo "Importing fedora GPG key..."
        gpg --import "$download_dir/fedora/$fedora_key_filename"
        echo "Verifying fedora signature..."
        (cd "$download_dir/fedora/" && gpg --verify-files "$fedora_sums_filename")
    fi
    echo "Downloading fedora ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --continue --timestamping --show-progress --directory-prefix="$download_dir/fedora/" "$fedora_iso_url"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying fedora ISO image integrity..."
        (cd "$download_dir/fedora" && sha256sum -c "$fedora_sums_filename")
    fi
}

function download_ubuntu() {
    ubuntu_base_url="https://cdimage.ubuntu.com/daily-live/current"
    ubuntu_iso_filename="${ubuntu_version}-desktop-${ubuntu_architecture}.iso"
    ubuntu_sums_url="${ubuntu_base_url}/SHA256SUMS"
    ubuntu_sums_sign_url="${ubuntu_base_url}/SHA256SUMS.gpg"
    if [[ ! -d "$download_dir/ubuntu/" ]]; then mkdir -p "$download_dir/ubuntu/"; fi
    echo "Downloading Ubuntu checksums and signature..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/ubuntu/" "$ubuntu_sums_url"
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/ubuntu/" "$ubuntu_sums_sign_url"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying Ubuntu signature..."
        gpg --keyid-format long --keyserver hkp://keyserver.ubuntu.com --recv-keys 0x843938DF228D22F7B3742BC0D94AA3F0EFE21092
        gpg --keyid-format long --verify "$download_dir/ubuntu/SHA256SUMS.gpg" "$download_dir/ubuntu/SHA256SUMS"
    fi
    echo "Downloading Ubuntu ISO image..."
    # shellcheck disable=SC2086
    wget $wget_opts --timestamping --show-progress --directory-prefix="$download_dir/ubuntu/" "$ubuntu_base_url/$ubuntu_iso_filename"
    if [[ "$verify" == "true" ]]; then
        echo "Verifying Ubuntu ISO image integrity..."
        (cd "$download_dir/ubuntu/" && sha256sum --check --ignore-missing <(cat SHA256SUMS))
    fi
}

function _main() {
    wget_opts="--no-verbose"
    verify="true"
    while getopts ":cd:h" opt; do
        case $opt in
            c) wget_opts="--spider"; verify="false"; shift;;
            d) download_dir="$OPTARG"; shift;;
            h) echo "Usage: $usage"; exit 0;;
            \?) echo "[distrib-dl] ERROR: invalid option -$OPTARG" >&2; echo "Usage: $usage"; exit 1;;
        esac
    done

    for distribution in "$@"; do
        if [[ "$distribution" == "debian" ]] ; then download_debian; fi
        if [[ "$distribution" == "debian-live" ]] ; then download_debian_live; fi
        if [[ "$distribution" == "centos" ]] ; then download_centos; fi
        if [[ "$distribution" == "tails" ]] ; then download_tails; fi
        if [[ "$distribution" == "kali" ]] ; then download_kali; fi
        if [[ "$distribution" == "proxmox" ]] ; then download_proxmox; fi
        if [[ "$distribution" == "pfsense" ]] ; then download_pfsense; fi
        if [[ "$distribution" == "freebsd" ]] ; then download_freebsd; fi
        if [[ "$distribution" == "androidx86" ]] ; then download_androidx86; fi
        if [[ "$distribution" == "debian-live-config" ]] ; then download_debian_live_config; fi
        if [[ "$distribution" == "fedora" ]] ; then download_fedora; fi
        if [[ "$distribution" == "ubuntu" ]] ; then download_ubuntu; fi
        if [[ "$distribution" == "all" ]] ; then download_debian && download_centos && download_tails && download_kali && download_proxmox && download_pfsense && download_freebsd && download_androidx86 && download_debian_live_config && download_fedora && download_ubuntu; fi
    done
}

#####################

_main "$@"
